import cv2
import numpy as np
import os
from datetime import datetime


def unsharp_masking(image, kernel_size=5, sigma=1.0, amount=1.0, threshold=0):
    gaussian = cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)
    mask = cv2.subtract(image, gaussian)
    mask = cv2.threshold(mask, threshold, 255, cv2.THRESH_TOZERO)[1]
    sharpened = cv2.addWeighted(image, 1.0, mask, amount, 0)
    return sharpened


def laplacian_sharpening(image, kernel_size=3):
    laplacian = cv2.Laplacian(image, cv2.CV_64F, ksize=kernel_size)
    laplacian = np.uint8(np.absolute(laplacian))
    sharpened = cv2.add(image, laplacian)
    return sharpened


def butterworth_high_pass(image, cutoff=30, order=2):
    # Fourier Transform
    f = np.fft.fft2(image)
    fshift = np.fft.fftshift(f)

    # Erstelle Butterworth High-Pass Filter
    rows, cols = image.shape
    crow, ccol = rows // 2, cols // 2
    y, x = np.ogrid[-crow:rows - crow, -ccol:cols - ccol]
    d = np.sqrt(x * x + y * y)
    butterworth = 1 / (1 + (cutoff / d) ** (2 * order))

    # Wende Filter an
    fshift_filtered = fshift * butterworth
    f_ishift = np.fft.ifftshift(fshift_filtered)
    img_filtered = np.fft.ifft2(f_ishift)
    img_filtered = np.abs(img_filtered)

    # Normalisiere und kombiniere mit Original
    img_filtered = cv2.normalize(img_filtered, None, 0, 255, cv2.NORM_MINMAX)
    sharpened = cv2.addWeighted(image, 1.2, img_filtered.astype(np.uint8), 0.3, 0)

    return sharpened


def adaptive_unsharp_masking(image, kernel_size=5):
    # Berechne lokale Varianz
    mean = cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)
    squared_mean = cv2.GaussianBlur(np.square(image.astype(float)), (kernel_size, kernel_size), 0)
    variance = np.sqrt(np.maximum(squared_mean - np.square(mean), 0))

    # Normalisiere Varianz als Gewichtung
    variance_normalized = variance / np.max(variance)

    # Unsharp Masking mit adaptiver St채rke
    gaussian = cv2.GaussianBlur(image, (kernel_size, kernel_size), 2.0)
    mask = cv2.subtract(image, gaussian)

    # Gewichte Maske basierend auf lokaler Varianz
    weighted_mask = (mask.astype(float) * variance_normalized).astype(np.uint8)
    sharpened = cv2.add(image, weighted_mask)

    return sharpened


def wavelet_sharpening(image):
    # Implementiere eine einfache Wavelet-basierte Sch채rfung
    # Horizontal detail
    kernel_h = np.array([[-1, -2, -1],
                         [0, 0, 0],
                         [1, 2, 1]], dtype=np.float32)

    # Vertical detail
    kernel_v = np.array([[-1, 0, 1],
                         [-2, 0, 2],
                         [-1, 0, 1]], dtype=np.float32)

    # Anwenden der Wavelet-Filter
    detail_h = cv2.filter2D(image, -1, kernel_h)
    detail_v = cv2.filter2D(image, -1, kernel_v)

    # Kombiniere Details
    details = cv2.addWeighted(np.absolute(detail_h), 0.5, np.absolute(detail_v), 0.5, 0)

    # F체ge Details zum Original hinzu
    sharpened = cv2.addWeighted(image, 1.0, details, 0.5, 0)

    return sharpened


def main():
    # Eingabepfad
    image_path = "C:/Users/s.baumgart/Desktop/preprocessing AngioNet/frame_20 (41).png"

    # Erstelle Ausgabeordner
    output_dir = os.path.join(os.path.dirname(image_path), "sharpened_results")
    os.makedirs(output_dir, exist_ok=True)

    # Lese Bild ein
    original = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    if original is None:
        print(f"Fehler beim Einlesen des Bildes: {image_path}")
        return

    # Erstelle Zeitstempel f체r eindeutige Benennung
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Dictionary mit Filtern und deren Parametern
    filters = {
        'unsharp_mask_strong': lambda img: unsharp_masking(img, kernel_size=5, sigma=1.0, amount=2.0),
        'butterworth': lambda img: butterworth_high_pass(img, cutoff=30, order=2),
        'adaptive_unsharp': lambda img: adaptive_unsharp_masking(img),
        'wavelet': lambda img: wavelet_sharpening(img),
        'laplacian': lambda img: laplacian_sharpening(img)
    }

    # Wende jeden Filter an und speichere das Ergebnis
    for filter_name, filter_func in filters.items():
        try:
            # Wende Filter an
            sharpened = filter_func(original)

            # Erstelle Ausgabepfad
            output_path = os.path.join(output_dir, f"{filter_name}_{timestamp}.png")

            # Speichere Ergebnis
            cv2.imwrite(output_path, sharpened)
            print(f"Erfolgreich gespeichert: {output_path}")

        except Exception as e:
            print(f"Fehler bei Filter {filter_name}: {str(e)}")

    # Speichere auch das Originalbild zum Vergleich
    original_output_path = os.path.join(output_dir, f"original_{timestamp}.png")
    cv2.imwrite(original_output_path, original)
    print(f"Originalbild gespeichert: {original_output_path}")


if __name__ == "__main__":
    main()
